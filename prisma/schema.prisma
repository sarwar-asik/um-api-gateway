// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id String @id @default(uuid())
//   name String
// }

model AcademicSemester {
  id                         String                      @id @default(uuid())
  year                       Int
  title                      String
  code                       String
  startMonth                 String
  endMonth                   String
  isCurrent                  Boolean?                    @default(false)
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  student                    Student[]
  semesterRegistration       SemesterRegistration[]
  studentEnrolledCourses     StudentEnrolledCourse[]
  studentEnrolledCourseMarks StudentEnrolledCourseMark[]
  studentSemesterPaymens     StudentSemesterPayment[]

  @@map("academic-semestart")
}

model AcademicFaculty {
  id                 String               @id @default(uuid())
  title              String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  academicDepartment AcademicDepartment[]
  students           Student[]
  faculties          Faculty[]

  @@map("academic-facullty")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  students          Student[]
  faculties         Faculty[]
  offeredCourses    OfferedCourse[]

  @@map("academic-department")
}

model Student {
  id                                String                              @id @default(uuid())
  studentId                         String
  firstName                         String
  lastName                          String
  middleName                        String
  profileImage                      String?
  email                             String
  contactNo                         String
  gender                            String
  bloodGroup                        String
  createdAt                         DateTime                            @default(now())
  updatedAt                         DateTime                            @updatedAt
  academicSemesterId                String
  academicSemester                  AcademicSemester                    @relation(fields: [academicSemesterId], references: [id])
  academicDepartmentId              String
  academicDepartment                AcademicDepartment                  @relation(fields: [academicDepartmentId], references: [id])
  academicFacultyId                 String
  academicFaculty                   AcademicFaculty                     @relation(fields: [academicFacultyId], references: [id])
  studentSemesterRegistrations      StudentSemesterRegistration[]
  StudentSemesterRegistrationCourse StudentSemesterRegistrationCourse[]
  studentEnrolledCourses            StudentEnrolledCourse[]
  studentEnrolledCourseMarks        StudentEnrolledCourseMark[]
  studentSemesterPaymens            StudentSemesterPayment[]
  studentAcademicInfos               StudentAcademicInfo[]

  @@map("students")
}

model Faculty {
  id           String @id @default(uuid())
  facultyId    String
  firstName    String
  lastName     String
  middleName   String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodGroup   String
  designation  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicDepartmentId       String
  academicDepartment         AcademicDepartment           @relation(fields: [academicDepartmentId], references: [id])
  academicFacultyId          String
  academicFaculty            AcademicFaculty              @relation(fields: [academicFacultyId], references: [id])
  courses                    CourseFaculty[]
  offeredCourseClassSchedule OfferedCourseClassSchedule[]

  @@map("faculties")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]

  @@map("buidings")
}

model Room {
  id         String @id @default(uuid())
  roomNumber String
  floor      String

  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  buildingId                 String
  building                   Building                     @relation(fields: [buildingId], references: [id])
  // @@map("room")
  offeredCourseClassSchedule OfferedCourseClassSchedule[]
}

model Course {
  id                     String                  @id @default(uuid())
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  title                  String
  code                   String
  credits                Int                     @default(0)
  prerequisite           CourseToPrerequisite[]  @relation("CourseToPrerequisite")
  prerequisiteFor        CourseToPrerequisite[]  @relation("PrerequisiteToCourse")
  faculties              CourseFaculty[]
  offeredCourses         OfferedCourse[]
  studentEnrolledCourses StudentEnrolledCourse[]

  @@map("courses")
}

model CourseToPrerequisite {
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  courseId       String
  course         Course   @relation(fields: [courseId], references: [id], name: "CourseToPrerequisite")
  prerequisiteId String
  prerequisite   Course   @relation(fields: [prerequisiteId], references: [id], name: "PrerequisiteToCourse")

  @@id([courseId, prerequisiteId])
}

model Test1 {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseID  String

  @@map("tests1")
}

model CourseFaculty {
  courseId  String
  course    Course @relation(fields: [courseId], references: [id])
  facultyId String

  faculty Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculties")
}

model SemesterRegistration {
  id                                String                              @id @default(uuid())
  startDate                         DateTime
  endDate                           DateTime
  status                            SemesterRegistrationStatus?         @default(UPCOMING)
  minCredit                         Int                                 @default(0)
  maxCredit                         Int                                 @default(0)
  createdAt                         DateTime                            @default(now())
  updatedAt                         DateTime                            @updatedAt
  academicSemesterId                String
  academicSemester                  AcademicSemester                    @relation(fields: [academicSemesterId], references: [id])
  offeredCourses                    OfferedCourse[]
  offeredCourseSection              OfferedCourseSection[]
  offeredCourseClassSchedule        OfferedCourseClassSchedule[]
  studentSemesterRegistrations      StudentSemesterRegistration[]
  StudentSemesterRegistrationCourse StudentSemesterRegistrationCourse[]

  @@map("semester_registrations")
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}

model OfferedCourse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])

  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])

  semesterRegistrationId             String
  semesterRegistration               SemesterRegistration                @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseSection               OfferedCourseSection[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("offered_courses")
}

model OfferedCourseSection {
  id                       String        @id @default(uuid())
  title                    String
  maxCapacity              Int
  currentlyEnrolledStudent Int           @default(0)
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  offeredCourseId          String
  offeredCourse            OfferedCourse @relation(fields: [offeredCourseId], references: [id])

  semesterRegistrationId             String
  semesterRegistration               SemesterRegistration                @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseClassSchedule         OfferedCourseClassSchedule[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("offered_course_sections")
}

model OfferedCourseClassSchedule {
  id                     String               @id @default(uuid())
  startTime              String
  endTime                String
  dayOfWeek              WeekDays             @default(SATURDAY)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  roomId String
  room   Room   @relation(fields: [roomId], references: [id])

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@map("offered_course_class_schedules")
}

enum WeekDays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

model StudentSemesterRegistration {
  id                     String               @id @default(uuid())
  isConfirmed            Boolean?             @default(false)
  totalCreditsTaken      Int?                 @default(0)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  studentId              String
  student                Student              @relation(fields: [studentId], references: [id])
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  @@map("student_semester_registrations")
}

// start after assignment-8 >>>

model StudentSemesterRegistrationCourse {
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  studentId              String
  student                Student              @relation(fields: [studentId], references: [id])
  offeredCourseId        String
  offeredCourse          OfferedCourse        @relation(fields: [offeredCourseId], references: [id])
  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  @@id([semesterRegistrationId, studentId, offeredCourseId]) //! !important for unique every field like id
  @@map("student_semester_registration_courses")
}

model StudentEnrolledCourse {
  id                         String                       @id @default(uuid())
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  studentId                  String
  student                    Student                      @relation(fields: [studentId], references: [id])
  courseId                   String
  course                     Course                       @relation(fields: [courseId], references: [id])
  academicSemesterId         String
  academicSemester           AcademicSemester             @relation(fields: [academicSemesterId], references: [id])
  grade                      String?
  point                      Float?                       @default(0)
  totalMarks                 Int?                         @default(0)
  status                     StudentEnrolledCourseStatus? @default(ONGOING)
  studentEnrolledCourseMarks StudentEnrolledCourseMark[]

  @@map("student_enrolled_courses")
}

enum StudentEnrolledCourseStatus {
  ONGOING
  COMPLETED
  WITHDRAWN
}

model StudentEnrolledCourseMark {
  id                      String                @id @default(uuid())
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  studentId               String
  student                 Student               @relation(fields: [studentId], references: [id])
  studentEnrolledCourseId String
  studentEnrolledCourse   StudentEnrolledCourse @relation(fields: [studentEnrolledCourseId], references: [id])
  academicSemesterId      String
  academicSemester        AcademicSemester      @relation(fields: [academicSemesterId], references: [id])
  grade                   String?
  marks                   Int?
  examType                ExamType?             @default(MIDTERM)

  @@map("student_enrolled_course_marks")
}

enum ExamType {
  MIDTERM
  FINAL
}

model StudentSemesterPayment {
  id                 String           @id @default(uuid())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  studentId          String
  student            Student          @relation(fields: [studentId], references: [id])
  academicSemesterId String
  academicSemester   AcademicSemester @relation(fields: [academicSemesterId], references: [id])

  fullPaymentAmount    Int?           @default(0)
  partialPaymentAmount Int?           @default(0)
  totalDueAmount       Int?           @default(0)
  totalPaidAmount      Int?           @default(0)
  paymentStatus        PaymentStatus? @default(PENDING)

  @@map("student_semester_payments")
}

enum PaymentStatus {
  PENDING
  PARTIAL_PAID
  FULL_PAID
}

model StudentAcademicInfo {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  studentId            String
  student              Student  @relation(fields: [studentId], references: [id])
  totalCompletedCredit Int?     @default(0)
  cgpa                 Float?   @default(0)

  @@map("student_academic_infos")
}
